/**
 *
 *  Items.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Items.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Items::Cols::_id = "id";
const std::string Items::Cols::_name = "name";
const std::string Items::Cols::_quantity = "quantity";
const std::string Items::Cols::_category = "category";
const std::string Items::Cols::_price = "price";
const std::string Items::Cols::_imageURL = "imageURL";
const std::string Items::Cols::_ownerUsername = "ownerUsername";
const std::string Items::primaryKeyName = "id";
const bool Items::hasPrimaryKey = true;
const std::string Items::tableName = "items";

const std::vector<typename Items::MetaData> Items::metaData_={
{"id","int64_t","integer",8,1,1,0},
{"name","std::string","text",0,0,0,1},
{"quantity","int64_t","int",8,0,0,1},
{"category","std::string","text",0,0,0,0},
{"price","double","float",8,0,0,0},
{"imageURL","std::string","text",0,0,0,0},
{"ownerUsername","std::string","text",0,0,0,0}
};
const std::string &Items::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Items::Items(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["quantity"].isNull())
        {
            quantity_=std::make_shared<int64_t>(r["quantity"].as<int64_t>());
        }
        if(!r["category"].isNull())
        {
            category_=std::make_shared<std::string>(r["category"].as<std::string>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<double>(r["price"].as<double>());
        }
        if(!r["imageURL"].isNull())
        {
            imageurl_=std::make_shared<std::string>(r["imageURL"].as<std::string>());
        }
        if(!r["ownerUsername"].isNull())
        {
            ownerusername_=std::make_shared<std::string>(r["ownerUsername"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            quantity_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            category_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            price_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            imageurl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            ownerusername_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Items::Items(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            quantity_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            category_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            price_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            imageurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            ownerusername_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

Items::Items(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<int64_t>((int64_t)pJson["quantity"].asInt64());
        }
    }
    if(pJson.isMember("category"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["category"].isNull())
        {
            category_=std::make_shared<std::string>(pJson["category"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<double>(pJson["price"].asDouble());
        }
    }
    if(pJson.isMember("imageURL"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["imageURL"].isNull())
        {
            imageurl_=std::make_shared<std::string>(pJson["imageURL"].asString());
        }
    }
    if(pJson.isMember("ownerUsername"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["ownerUsername"].isNull())
        {
            ownerusername_=std::make_shared<std::string>(pJson["ownerUsername"].asString());
        }
    }
}

void Items::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            quantity_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            category_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            price_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            imageurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            ownerusername_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void Items::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<int64_t>((int64_t)pJson["quantity"].asInt64());
        }
    }
    if(pJson.isMember("category"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["category"].isNull())
        {
            category_=std::make_shared<std::string>(pJson["category"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<double>(pJson["price"].asDouble());
        }
    }
    if(pJson.isMember("imageURL"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["imageURL"].isNull())
        {
            imageurl_=std::make_shared<std::string>(pJson["imageURL"].asString());
        }
    }
    if(pJson.isMember("ownerUsername"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["ownerUsername"].isNull())
        {
            ownerusername_=std::make_shared<std::string>(pJson["ownerUsername"].asString());
        }
    }
}

const int64_t &Items::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Items::getId() const noexcept
{
    return id_;
}
void Items::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
void Items::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename Items::PrimaryKeyType & Items::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Items::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Items::getName() const noexcept
{
    return name_;
}
void Items::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Items::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const int64_t &Items::getValueOfQuantity() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(quantity_)
        return *quantity_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Items::getQuantity() const noexcept
{
    return quantity_;
}
void Items::setQuantity(const int64_t &pQuantity) noexcept
{
    quantity_ = std::make_shared<int64_t>(pQuantity);
    dirtyFlag_[2] = true;
}

const std::string &Items::getValueOfCategory() const noexcept
{
    static const std::string defaultValue = std::string();
    if(category_)
        return *category_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Items::getCategory() const noexcept
{
    return category_;
}
void Items::setCategory(const std::string &pCategory) noexcept
{
    category_ = std::make_shared<std::string>(pCategory);
    dirtyFlag_[3] = true;
}
void Items::setCategory(std::string &&pCategory) noexcept
{
    category_ = std::make_shared<std::string>(std::move(pCategory));
    dirtyFlag_[3] = true;
}
void Items::setCategoryToNull() noexcept
{
    category_.reset();
    dirtyFlag_[3] = true;
}

const double &Items::getValueOfPrice() const noexcept
{
    static const double defaultValue = double();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<double> &Items::getPrice() const noexcept
{
    return price_;
}
void Items::setPrice(const double &pPrice) noexcept
{
    price_ = std::make_shared<double>(pPrice);
    dirtyFlag_[4] = true;
}
void Items::setPriceToNull() noexcept
{
    price_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Items::getValueOfImageurl() const noexcept
{
    static const std::string defaultValue = std::string();
    if(imageurl_)
        return *imageurl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Items::getImageurl() const noexcept
{
    return imageurl_;
}
void Items::setImageurl(const std::string &pImageurl) noexcept
{
    imageurl_ = std::make_shared<std::string>(pImageurl);
    dirtyFlag_[5] = true;
}
void Items::setImageurl(std::string &&pImageurl) noexcept
{
    imageurl_ = std::make_shared<std::string>(std::move(pImageurl));
    dirtyFlag_[5] = true;
}
void Items::setImageurlToNull() noexcept
{
    imageurl_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Items::getValueOfOwnerusername() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ownerusername_)
        return *ownerusername_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Items::getOwnerusername() const noexcept
{
    return ownerusername_;
}
void Items::setOwnerusername(const std::string &pOwnerusername) noexcept
{
    ownerusername_ = std::make_shared<std::string>(pOwnerusername);
    dirtyFlag_[6] = true;
}
void Items::setOwnerusername(std::string &&pOwnerusername) noexcept
{
    ownerusername_ = std::make_shared<std::string>(std::move(pOwnerusername));
    dirtyFlag_[6] = true;
}
void Items::setOwnerusernameToNull() noexcept
{
    ownerusername_.reset();
    dirtyFlag_[6] = true;
}

void Items::updateId(const uint64_t id)
{
    id_ = std::make_shared<int64_t>(static_cast<int64_t>(id));
}

const std::vector<std::string> &Items::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "quantity",
        "category",
        "price",
        "imageURL",
        "ownerUsername"
    };
    return inCols;
}

void Items::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCategory())
        {
            binder << getValueOfCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getImageurl())
        {
            binder << getValueOfImageurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOwnerusername())
        {
            binder << getValueOfOwnerusername();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Items::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Items::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCategory())
        {
            binder << getValueOfCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getImageurl())
        {
            binder << getValueOfImageurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getOwnerusername())
        {
            binder << getValueOfOwnerusername();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Items::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=(Json::Int64)getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getCategory())
    {
        ret["category"]=getValueOfCategory();
    }
    else
    {
        ret["category"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getImageurl())
    {
        ret["imageURL"]=getValueOfImageurl();
    }
    else
    {
        ret["imageURL"]=Json::Value();
    }
    if(getOwnerusername())
    {
        ret["ownerUsername"]=getValueOfOwnerusername();
    }
    else
    {
        ret["ownerUsername"]=Json::Value();
    }
    return ret;
}

Json::Value Items::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getQuantity())
            {
                ret[pMasqueradingVector[2]]=(Json::Int64)getValueOfQuantity();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCategory())
            {
                ret[pMasqueradingVector[3]]=getValueOfCategory();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[4]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getImageurl())
            {
                ret[pMasqueradingVector[5]]=getValueOfImageurl();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getOwnerusername())
            {
                ret[pMasqueradingVector[6]]=getValueOfOwnerusername();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=(Json::Int64)getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getCategory())
    {
        ret["category"]=getValueOfCategory();
    }
    else
    {
        ret["category"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getImageurl())
    {
        ret["imageURL"]=getValueOfImageurl();
    }
    else
    {
        ret["imageURL"]=Json::Value();
    }
    if(getOwnerusername())
    {
        ret["ownerUsername"]=getValueOfOwnerusername();
    }
    else
    {
        ret["ownerUsername"]=Json::Value();
    }
    return ret;
}

bool Items::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(2, "quantity", pJson["quantity"], err, true))
            return false;
    }
    else
    {
        err="The quantity column cannot be null";
        return false;
    }
    if(pJson.isMember("category"))
    {
        if(!validJsonOfField(3, "category", pJson["category"], err, true))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(4, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("imageURL"))
    {
        if(!validJsonOfField(5, "imageURL", pJson["imageURL"], err, true))
            return false;
    }
    if(pJson.isMember("ownerUsername"))
    {
        if(!validJsonOfField(6, "ownerUsername", pJson["ownerUsername"], err, true))
            return false;
    }
    return true;
}
bool Items::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Items::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(2, "quantity", pJson["quantity"], err, false))
            return false;
    }
    if(pJson.isMember("category"))
    {
        if(!validJsonOfField(3, "category", pJson["category"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(4, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("imageURL"))
    {
        if(!validJsonOfField(5, "imageURL", pJson["imageURL"], err, false))
            return false;
    }
    if(pJson.isMember("ownerUsername"))
    {
        if(!validJsonOfField(6, "ownerUsername", pJson["ownerUsername"], err, false))
            return false;
    }
    return true;
}
bool Items::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Items::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
